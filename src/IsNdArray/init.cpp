// 本来, NBLAのInit.cppはジェネレータプログラムにより自動で生成される
// ここでは、手動で記述している

// *WARNING*
// THIS FILE IS AUTO-GENERATED BY CODE GENERATOR.
// PLEASE DO NOT EDIT THIS FILE BY HAND!
// If you want to modify this file, edit following files.
// - src/nbla/init.cpp.tmpl
// - build-tools/code_generator/generate.py


#include <IsNdArray/cpu.hpp>
#include <IsNdArray/array_registry.hpp>
#include <IsNdArray/array/cpu_array.hpp>
// #include <IsNdArray/utils/dlpack_array_registry.hpp>
// #include <IsNdArray/array/cpu_dlpack_array.hpp>
#include <IsNdArray/function_registry.hpp>
#include <IsNdArray/backend_registry.hpp>

//% for name, snake_name, _ in function_list :
//% if name in function_types :
//#include <IsNdArray/function/${snake_name}.hpp>
//% endif
//% endfor
//% for name, snake_name, _ in solver_list :
//% if name in solver_types :
//#include <IsNdArray/solver/${snake_name}.hpp>
//% endif
//% endfor

#include <IsNdArray/function/abs.hpp>
#include <IsNdArray/function/acos.hpp>
#include <IsNdArray/function/acosh.hpp>
#include <IsNdArray/function/add_scalar.hpp>
#include <IsNdArray/function/add2.hpp>
#include <IsNdArray/function/affine.hpp>
#include <IsNdArray/function/arange.hpp>
#include <IsNdArray/function/asin.hpp>
#include <IsNdArray/function/asinh.hpp>
#include <IsNdArray/function/atan.hpp>
#include <IsNdArray/function/atan2.hpp>
#include <IsNdArray/function/atanh.hpp>
#include <IsNdArray/function/bc_add2.hpp>
#include <IsNdArray/function/broadcast.hpp>
#include <IsNdArray/function/ceil.hpp>
#include <IsNdArray/function/concatenate.hpp>
#include <IsNdArray/function/constant.hpp>
#include <IsNdArray/function/cos.hpp>
#include <IsNdArray/function/cosh.hpp>
#include <IsNdArray/function/cumprod.hpp>
#include <IsNdArray/function/cumsum.hpp>
#include <IsNdArray/function/div2.hpp>
#include <IsNdArray/function/equal_scalar.hpp>
#include <IsNdArray/function/equal.hpp>
#include <IsNdArray/function/exp.hpp>
#include <IsNdArray/function/flip.hpp>
#include <IsNdArray/function/floor.hpp>
#include <IsNdArray/function/greater_equal_scalar.hpp>
#include <IsNdArray/function/greater_equal.hpp>
#include <IsNdArray/function/greater_scalar.hpp>
#include <IsNdArray/function/greater.hpp>
#include <IsNdArray/function/isinf.hpp>
#include <IsNdArray/function/isnan.hpp>
#include <IsNdArray/function/less_equal_scalar.hpp>
#include <IsNdArray/function/less_equal.hpp>
#include <IsNdArray/function/less_scalar.hpp>
#include <IsNdArray/function/less.hpp>
#include <IsNdArray/function/log.hpp>
#include <IsNdArray/function/log1p.hpp>
#include <IsNdArray/function/log2.hpp>
#include <IsNdArray/function/log10.hpp>
#include <IsNdArray/function/log_sigmoid.hpp>
#include <IsNdArray/function/logical_and_scalar.hpp>
#include <IsNdArray/function/logical_and.hpp>
#include <IsNdArray/function/logical_not.hpp>
#include <IsNdArray/function/logical_or_scalar.hpp>
#include <IsNdArray/function/logical_or.hpp>
#include <IsNdArray/function/logical_xor_scalar.hpp>
#include <IsNdArray/function/logical_xor.hpp>
#include <IsNdArray/function/matrix_diag_part.hpp>
#include <IsNdArray/function/matrix_diag.hpp>
#include <IsNdArray/function/max.hpp>
#include <IsNdArray/function/maximum_scalar.hpp>
#include <IsNdArray/function/maximum2.hpp>
#include <IsNdArray/function/mean.hpp>
#include <IsNdArray/function/min.hpp>
#include <IsNdArray/function/minimum_scalar.hpp>
#include <IsNdArray/function/minimum2.hpp>
#include <IsNdArray/function/mul_scalar.hpp>
#include <IsNdArray/function/mul2.hpp>
#include <IsNdArray/function/not_equal_scalar.hpp>
#include <IsNdArray/function/not_equal.hpp>
#include <IsNdArray/function/pow_scalar.hpp>
#include <IsNdArray/function/pow2.hpp>
#include <IsNdArray/function/prod.hpp>
#include <IsNdArray/function/r_div_scalar.hpp>
#include <IsNdArray/function/r_pow_scalar.hpp>
#include <IsNdArray/function/r_sub_scalar.hpp>
#include <IsNdArray/function/rand.hpp>
#include <IsNdArray/function/randint.hpp>
#include <IsNdArray/function/randn.hpp>
#include <IsNdArray/function/reshape.hpp>
#include <IsNdArray/function/round.hpp>
#include <IsNdArray/function/sigmoid.hpp>
#include <IsNdArray/function/sign.hpp>
#include <IsNdArray/function/sin.hpp>
#include <IsNdArray/function/sinc.hpp>
#include <IsNdArray/function/sinh.hpp>
#include <IsNdArray/function/slice.hpp>
#include <IsNdArray/function/sort.hpp>
#include <IsNdArray/function/softmax.hpp>
#include <IsNdArray/function/split.hpp>
#include <IsNdArray/function/sqrt.hpp>
#include <IsNdArray/function/stack.hpp>
#include <IsNdArray/function/sub2.hpp>
#include <IsNdArray/function/sum.hpp>
#include <IsNdArray/function/tan.hpp>
#include <IsNdArray/function/tanh.hpp>
#include <IsNdArray/function/transpose.hpp>
#include <IsNdArray/function/where.hpp>

namespace is
{
    namespace nbla
    {
        void init_cpu()
        {
            static volatile bool is_initialized = false; // 初回だけfalseに初期化
            if (is_initialized)
                return;
            
            // No branch after this, hence, we should put it here to prevent re-enter.
            is_initialized = true;

            /* Backend系クラスの登録 */ 
            NBLA_REGISTER_BACKEND("cpu", []() { return SingletonManager::get<Cpu>(); });

            /* Array系クラスの登録 */
            // CpuArray
			NBLA_REGISTER_ARRAY_CREATOR(CpuArray);
			SingletonManager::get<Cpu>()->register_array_class("CpuArray");
            NBLA_REGISTER_ARRAY_SYNCHRONIZER(CpuArray, CpuCachedArray, synchronizer_default);

            // CpuCachedArray
            NBLA_REGISTER_ARRAY_CREATOR(CpuCachedArray);
            SingletonManager::get<Cpu>()->register_array_class("CpuCachedArray");
			NBLA_REGISTER_ARRAY_SYNCHRONIZER(CpuCachedArray, CpuArray, synchronizer_default);

            // CpuDlpackArray
			//NBLA_REGISTER_ARRAY_CREATOR(CpuDlpackArray);
			//SingletonManager::get<Cpu>()->register_array_class("CpuDlpackArray");
			//NBLA_REGISTER_DLPACK_DEVICE_TYPE_TO_CONTEXT(kDLCPU, cpu, CpuDlpackArray);
			//NBLA_REGISTER_ARRAY_TO_DLPACK_DEVICE_TYPE(CpuArray, kDLCPU);
			//NBLA_REGISTER_ARRAY_TO_DLPACK_DEVICE_TYPE(CpuCachedArray, kDLCPU);
			//// It is not necessary that DlpackArray is converted from other arrays.
			//NBLA_REGISTER_ARRAY_SYNCHRONIZER(CpuDlpackArray, CpuArray, synchronizer_default);
			//NBLA_REGISTER_ARRAY_SYNCHRONIZER(CpuDlpackArray, CpuCachedArray, synchronizer_default);

            /* Array Groupに(Array系クラス, バックエンド系)の組を登録 */
            NBLA_REGISTER_ARRAY_GROUP(CpuArray, cpu);
            NBLA_REGISTER_ARRAY_GROUP(CpuCachedArray, cpu);
            // NBLA_REGISTER_ARRAY_GROUP(CpuDlpackArray, cpu);

            /* Universal Function系クラスの登録 */
            // % for name, _, arg_types in function_list:
            // % for type_config, ttypes in function_types.get(name, {}).items():
            //     <%
            //     ttype_args = ', '.join(ttypes)
            //     ttype_symbol = ''.join(map(lambda x: x.replace(' ', ''), ttypes))
            //     function_sym = '{}<{}>'.format(name, ttype_args)
            //     function_typed_sym = '{}_{}'.format(name, ttype_symbol)
            //     %> 
            // using ${function_typed_sym} = ${function_sym};
            // NBLA_REGISTER_FUNCTION_IMPL(${name}, ${function_typed_sym}, "cpu:${type_config}"${''.join(map(lambda x: ', ' + x, arg_types))});
            // % endfor
            // % endfor
            using uchar = unsigned char;
            using ushort = unsigned short;
            using uint = unsigned int;
            using ulong = unsigned long;
            using longlong = long long;
            using ulonglong = unsigned long long;
            using longdouble = long double;

            /*abs*/
            // NBLA_REGISTER_FUNCTION_IMPL(Abs, Abs<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(Abs, Abs<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(Abs, Abs<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(Abs, Abs<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(Abs, Abs<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(Abs, Abs<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(Abs, Abs<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(Abs, Abs<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(Abs, Abs<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(Abs, Abs<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(Abs, Abs<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(Abs, Abs<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(Abs, Abs<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(Abs, Abs<longdouble>, "cpu:longdouble")

            /*acos*/
            // NBLA_REGISTER_FUNCTION_IMPL(ACos, ACos<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(ACos, ACos<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(ACos, ACos<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(ACos, ACos<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(ACos, ACos<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(ACos, ACos<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(ACos, ACos<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(ACos, ACos<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(ACos, ACos<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(ACos, ACos<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(ACos, ACos<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(ACos, ACos<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(ACos, ACos<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(ACos, ACos<longdouble>, "cpu:longdouble")

            /*acosh*/
            // NBLA_REGISTER_FUNCTION_IMPL(ACosh, ACosh<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(ACosh, ACosh<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(ACosh, ACosh<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(ACosh, ACosh<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(ACosh, ACosh<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(ACosh, ACosh<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(ACosh, ACosh<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(ACosh, ACosh<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(ACosh, ACosh<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(ACosh, ACosh<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(ACosh, ACosh<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(ACosh, ACosh<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(ACosh, ACosh<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(ACosh, ACosh<longdouble>, "cpu:longdouble")

            /*add_scalar*/
            // NBLA_REGISTER_FUNCTION_IMPL(AddScalar, AddScalar<bool>, "cpu:bool", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(AddScalar, AddScalar<uchar>, "cpu:ubyte", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(AddScalar, AddScalar<char>, "cpu:byte", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(AddScalar, AddScalar<ushort>, "cpu:ushort", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(AddScalar, AddScalar<short>, "cpu:short", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(AddScalar, AddScalar<uint>, "cpu:uint", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(AddScalar, AddScalar<int>, "cpu:int", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(AddScalar, AddScalar<ulong>, "cpu:ulong", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(AddScalar, AddScalar<long>, "cpu:long", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(AddScalar, AddScalar<ulonglong>, "cpu:ulonglong", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(AddScalar, AddScalar<longlong>, "cpu:longlong", double, bool)
            NBLA_REGISTER_FUNCTION_IMPL(AddScalar, AddScalar<float>, "cpu:float", double, bool)
            NBLA_REGISTER_FUNCTION_IMPL(AddScalar, AddScalar<double>, "cpu:double", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(AddScalar, AddScalar<longdouble>, "cpu:longdouble", double, bool)

            /*add2*/
            // NBLA_REGISTER_FUNCTION_IMPL(Add2, Add2<bool>, "cpu:bool", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Add2, Add2<uchar>, "cpu:ubyte", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Add2, Add2<char>, "cpu:byte", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Add2, Add2<ushort>, "cpu:ushort", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Add2, Add2<short>, "cpu:short", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Add2, Add2<uint>, "cpu:uint", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Add2, Add2<int>, "cpu:int", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Add2, Add2<ulong>, "cpu:ulong", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Add2, Add2<long>, "cpu:long", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Add2, Add2<ulonglong>, "cpu:ulonglong", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Add2, Add2<longlong>, "cpu:longlong", bool)
            NBLA_REGISTER_FUNCTION_IMPL(Add2, Add2<float>, "cpu:float", bool)
            NBLA_REGISTER_FUNCTION_IMPL(Add2, Add2<double>, "cpu:double", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Add2, Add2<longdouble>, "cpu:longdouble", bool)

            /*affine*/
            // NBLA_REGISTER_FUNCTION_IMPL(Affine, Affine<bool>, "cpu:bool", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Affine, Affine<uchar>, "cpu:ubyte", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Affine, Affine<char>, "cpu:byte", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Affine, Affine<ushort>, "cpu:ushort", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Affine, Affine<short>, "cpu:short", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Affine, Affine<uint>, "cpu:uint", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Affine, Affine<int>, "cpu:int", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Affine, Affine<ulong>, "cpu:ulong", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Affine, Affine<long>, "cpu:long", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Affine, Affine<ulonglong>, "cpu:ulonglong", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Affine, Affine<longlong>, "cpu:longlong", int)
            NBLA_REGISTER_FUNCTION_IMPL(Affine, Affine<float>, "cpu:float", int)
            NBLA_REGISTER_FUNCTION_IMPL(Affine, Affine<double>, "cpu:double", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Affine, Affine<longdouble>, "cpu:longdouble", int)

            /*arange*/
            // NBLA_REGISTER_FUNCTION_IMPL(Arange, Arange<bool>, "cpu:bool", float, float, float)
            // NBLA_REGISTER_FUNCTION_IMPL(Arange, Arange<uchar>, "cpu:ubyte", float, float, float)
            // NBLA_REGISTER_FUNCTION_IMPL(Arange, Arange<char>, "cpu:byte", float, float, float)
            // NBLA_REGISTER_FUNCTION_IMPL(Arange, Arange<ushort>, "cpu:ushort", float, float, float)
            // NBLA_REGISTER_FUNCTION_IMPL(Arange, Arange<short>, "cpu:short", float, float, float)
            // NBLA_REGISTER_FUNCTION_IMPL(Arange, Arange<uint>, "cpu:uint", float, float, float)
            // NBLA_REGISTER_FUNCTION_IMPL(Arange, Arange<int>, "cpu:int", float, float, float)
            // NBLA_REGISTER_FUNCTION_IMPL(Arange, Arange<ulong>, "cpu:ulong", float, float, float)
            // NBLA_REGISTER_FUNCTION_IMPL(Arange, Arange<long>, "cpu:long", float, float, float)
            // NBLA_REGISTER_FUNCTION_IMPL(Arange, Arange<ulonglong>, "cpu:ulonglong", float, float, float)
            // NBLA_REGISTER_FUNCTION_IMPL(Arange, Arange<longlong>, "cpu:longlong", float, float, float)
            NBLA_REGISTER_FUNCTION_IMPL(Arange, Arange<float>, "cpu:float", float, float, float)
            NBLA_REGISTER_FUNCTION_IMPL(Arange, Arange<double>, "cpu:double", float, float, float)
            // NBLA_REGISTER_FUNCTION_IMPL(Arange, Arange<longdouble>, "cpu:longdouble", float, float, float)

            /*asin*/
            // NBLA_REGISTER_FUNCTION_IMPL(ASin, ASin<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(ASin, ASin<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(ASin, ASin<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(ASin, ASin<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(ASin, ASin<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(ASin, ASin<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(ASin, ASin<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(ASin, ASin<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(ASin, ASin<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(ASin, ASin<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(ASin, ASin<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(ASin, ASin<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(ASin, ASin<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(ASin, ASin<longdouble>, "cpu:longdouble")

            /*asinh*/
            // NBLA_REGISTER_FUNCTION_IMPL(ASinh, ASinh<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(ASinh, ASinh<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(ASinh, ASinh<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(ASinh, ASinh<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(ASinh, ASinh<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(ASinh, ASinh<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(ASinh, ASinh<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(ASinh, ASinh<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(ASinh, ASinh<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(ASinh, ASinh<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(ASinh, ASinh<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(ASinh, ASinh<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(ASinh, ASinh<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(ASinh, ASinh<longdouble>, "cpu:longdouble")

            /*atan*/
            // NBLA_REGISTER_FUNCTION_IMPL(ATan, ATan<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(ATan, ATan<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(ATan, ATan<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(ATan, ATan<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(ATan, ATan<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(ATan, ATan<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(ATan, ATan<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(ATan, ATan<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(ATan, ATan<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(ATan, ATan<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(ATan, ATan<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(ATan, ATan<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(ATan, ATan<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(ATan, ATan<longdouble>, "cpu:longdouble")

            /*atan2*/
            // NBLA_REGISTER_FUNCTION_IMPL(ATan2, ATan2<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(ATan2, ATan2<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(ATan2, ATan2<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(ATan2, ATan2<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(ATan2, ATan2<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(ATan2, ATan2<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(ATan2, ATan2<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(ATan2, ATan2<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(ATan2, ATan2<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(ATan2, ATan2<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(ATan2, ATan2<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(ATan2, ATan2<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(ATan2, ATan2<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(ATan2, ATan2<longdouble>, "cpu:longdouble")

            /*atanh*/
            // NBLA_REGISTER_FUNCTION_IMPL(ATanh, ATanh<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(ATanh, ATanh<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(ATanh, ATanh<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(ATanh, ATanh<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(ATanh, ATanh<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(ATanh, ATanh<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(ATanh, ATanh<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(ATanh, ATanh<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(ATanh, ATanh<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(ATanh, ATanh<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(ATanh, ATanh<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(ATanh, ATanh<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(ATanh, ATanh<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(ATanh, ATanh<longdouble>, "cpu:longdouble")

            /*bc_add2*/
            // NBLA_REGISTER_FUNCTION_IMPL(BcAdd2, BcAdd2<bool>, "cpu:bool", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(BcAdd2, BcAdd2<uchar>, "cpu:ubyte", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(BcAdd2, BcAdd2<char>, "cpu:byte", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(BcAdd2, BcAdd2<ushort>, "cpu:ushort", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(BcAdd2, BcAdd2<short>, "cpu:short", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(BcAdd2, BcAdd2<uint>, "cpu:uint", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(BcAdd2, BcAdd2<int>, "cpu:int", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(BcAdd2, BcAdd2<ulong>, "cpu:ulong", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(BcAdd2, BcAdd2<long>, "cpu:long", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(BcAdd2, BcAdd2<ulonglong>, "cpu:ulonglong", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(BcAdd2, BcAdd2<longlong>, "cpu:longlong", bool)
            NBLA_REGISTER_FUNCTION_IMPL(BcAdd2, BcAdd2<float>, "cpu:float", bool)
            NBLA_REGISTER_FUNCTION_IMPL(BcAdd2, BcAdd2<double>, "cpu:double", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(BcAdd2, BcAdd2<longdouble>, "cpu:longdouble", bool)

            /*broadcast*/
            // NBLA_REGISTER_FUNCTION_IMPL(Broadcast, Broadcast<bool>, "cpu:bool", const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Broadcast, Broadcast<uchar>, "cpu:ubyte", const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Broadcast, Broadcast<char>, "cpu:byte", const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Broadcast, Broadcast<ushort>, "cpu:ushort", const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Broadcast, Broadcast<short>, "cpu:short", const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Broadcast, Broadcast<uint>, "cpu:uint", const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Broadcast, Broadcast<int>, "cpu:int", const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Broadcast, Broadcast<ulong>, "cpu:ulong", const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Broadcast, Broadcast<long>, "cpu:long", const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Broadcast, Broadcast<ulonglong>, "cpu:ulonglong", const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Broadcast, Broadcast<longlong>, "cpu:longlong", const vector<int64_t> &)
            NBLA_REGISTER_FUNCTION_IMPL(Broadcast, Broadcast<float>, "cpu:float", const vector<int64_t> &)
            NBLA_REGISTER_FUNCTION_IMPL(Broadcast, Broadcast<double>, "cpu:double", const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Broadcast, Broadcast<longdouble>, "cpu:longdouble", const vector<int64_t> &)

            /*ceil*/
            // NBLA_REGISTER_FUNCTION_IMPL(Ceil, Ceil<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(Ceil, Ceil<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(Ceil, Ceil<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(Ceil, Ceil<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(Ceil, Ceil<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(Ceil, Ceil<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(Ceil, Ceil<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(Ceil, Ceil<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(Ceil, Ceil<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(Ceil, Ceil<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(Ceil, Ceil<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(Ceil, Ceil<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(Ceil, Ceil<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(Ceil, Ceil<longdouble>, "cpu:longdouble")

            /*concatenate*/
            // NBLA_REGISTER_FUNCTION_IMPL(Concatenate, Concatenate<bool>, "cpu:bool", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Concatenate, Concatenate<uchar>, "cpu:ubyte", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Concatenate, Concatenate<char>, "cpu:byte", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Concatenate, Concatenate<ushort>, "cpu:ushort", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Concatenate, Concatenate<short>, "cpu:short", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Concatenate, Concatenate<uint>, "cpu:uint", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Concatenate, Concatenate<int>, "cpu:int", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Concatenate, Concatenate<ulong>, "cpu:ulong", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Concatenate, Concatenate<long>, "cpu:long", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Concatenate, Concatenate<ulonglong>, "cpu:ulonglong", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Concatenate, Concatenate<longlong>, "cpu:longlong", int)
            NBLA_REGISTER_FUNCTION_IMPL(Concatenate, Concatenate<float>, "cpu:float", int)
            NBLA_REGISTER_FUNCTION_IMPL(Concatenate, Concatenate<double>, "cpu:double", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Concatenate, Concatenate<longdouble>, "cpu:longdouble", int)

            /*constant*/
            // NBLA_REGISTER_FUNCTION_IMPL(Constant, Constant<bool>, "cpu:bool", float, const vector<int> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Constant, Constant<uchar>, "cpu:ubyte", float, const vector<int> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Constant, Constant<char>, "cpu:byte", float, const vector<int> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Constant, Constant<ushort>, "cpu:ushort", float, const vector<int> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Constant, Constant<short>, "cpu:short", float, const vector<int> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Constant, Constant<uint>, "cpu:uint", float, const vector<int> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Constant, Constant<int>, "cpu:int", float, const vector<int> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Constant, Constant<ulong>, "cpu:ulong", float, const vector<int> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Constant, Constant<long>, "cpu:long", float, const vector<int> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Constant, Constant<ulonglong>, "cpu:ulonglong", float, const vector<int> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Constant, Constant<longlong>, "cpu:longlong", float, const vector<int> &)
            NBLA_REGISTER_FUNCTION_IMPL(Constant, Constant<float>, "cpu:float", float, const vector<int> &)
            NBLA_REGISTER_FUNCTION_IMPL(Constant, Constant<double>, "cpu:double", float, const vector<int> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Constant, Constant<longdouble>, "cpu:longdouble", float, const vector<int> &)

            /*cos*/
            // NBLA_REGISTER_FUNCTION_IMPL(Cos, Cos<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(Cos, Cos<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(Cos, Cos<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(Cos, Cos<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(Cos, Cos<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(Cos, Cos<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(Cos, Cos<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(Cos, Cos<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(Cos, Cos<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(Cos, Cos<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(Cos, Cos<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(Cos, Cos<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(Cos, Cos<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(Cos, Cos<longdouble>, "cpu:longdouble")

            /*cosh*/
            // NBLA_REGISTER_FUNCTION_IMPL(Cosh, Cosh<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(Cosh, Cosh<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(Cosh, Cosh<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(Cosh, Cosh<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(Cosh, Cosh<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(Cosh, Cosh<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(Cosh, Cosh<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(Cosh, Cosh<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(Cosh, Cosh<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(Cosh, Cosh<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(Cosh, Cosh<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(Cosh, Cosh<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(Cosh, Cosh<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(Cosh, Cosh<longdouble>, "cpu:longdouble")

            /*cumprod*/
            // NBLA_REGISTER_FUNCTION_IMPL(CumProd, CumProd<bool>, "cpu:bool", int, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(CumProd, CumProd<uchar>, "cpu:ubyte", int, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(CumProd, CumProd<char>, "cpu:byte", int, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(CumProd, CumProd<ushort>, "cpu:ushort", int, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(CumProd, CumProd<short>, "cpu:short", int, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(CumProd, CumProd<uint>, "cpu:uint", int, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(CumProd, CumProd<int>, "cpu:int", int, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(CumProd, CumProd<ulong>, "cpu:ulong", int, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(CumProd, CumProd<long>, "cpu:long", int, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(CumProd, CumProd<ulonglong>, "cpu:ulonglong", int, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(CumProd, CumProd<longlong>, "cpu:longlong", int, bool, bool)
            NBLA_REGISTER_FUNCTION_IMPL(CumProd, CumProd<float>, "cpu:float", int, bool, bool)
            NBLA_REGISTER_FUNCTION_IMPL(CumProd, CumProd<double>, "cpu:double", int, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(CumProd, CumProd<longdouble>, "cpu:longdouble", int, bool, bool)

            /*cumsum*/
            // NBLA_REGISTER_FUNCTION_IMPL(CumSum, CumSum<bool>, "cpu:bool", int, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(CumSum, CumSum<uchar>, "cpu:ubyte", int, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(CumSum, CumSum<char>, "cpu:byte", int, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(CumSum, CumSum<ushort>, "cpu:ushort", int, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(CumSum, CumSum<short>, "cpu:short", int, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(CumSum, CumSum<uint>, "cpu:uint", int, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(CumSum, CumSum<int>, "cpu:int", int, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(CumSum, CumSum<ulong>, "cpu:ulong", int, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(CumSum, CumSum<long>, "cpu:long", int, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(CumSum, CumSum<ulonglong>, "cpu:ulonglong", int, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(CumSum, CumSum<longlong>, "cpu:longlong", int, bool, bool)
            NBLA_REGISTER_FUNCTION_IMPL(CumSum, CumSum<float>, "cpu:float", int, bool, bool)
            NBLA_REGISTER_FUNCTION_IMPL(CumSum, CumSum<double>, "cpu:double", int, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(CumSum, CumSum<longdouble>, "cpu:longdouble", int, bool, bool)

            /*div2*/
            // NBLA_REGISTER_FUNCTION_IMPL(Div2, Div2<bool>, "cpu:bool", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Div2, Div2<uchar>, "cpu:ubyte", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Div2, Div2<char>, "cpu:byte", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Div2, Div2<ushort>, "cpu:ushort", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Div2, Div2<short>, "cpu:short", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Div2, Div2<uint>, "cpu:uint", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Div2, Div2<int>, "cpu:int", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Div2, Div2<ulong>, "cpu:ulong", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Div2, Div2<long>, "cpu:long", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Div2, Div2<ulonglong>, "cpu:ulonglong", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Div2, Div2<longlong>, "cpu:longlong", bool)
            NBLA_REGISTER_FUNCTION_IMPL(Div2, Div2<float>, "cpu:float", bool)
            NBLA_REGISTER_FUNCTION_IMPL(Div2, Div2<double>, "cpu:double", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Div2, Div2<longdouble>, "cpu:longdouble", bool)

            /*equal_scalar*/
            // NBLA_REGISTER_FUNCTION_IMPL(EqualScalar, EqualScalar<bool>, "cpu:bool", double)
            // NBLA_REGISTER_FUNCTION_IMPL(EqualScalar, EqualScalar<uchar>, "cpu:ubyte", double)
            // NBLA_REGISTER_FUNCTION_IMPL(EqualScalar, EqualScalar<char>, "cpu:byte", double)
            // NBLA_REGISTER_FUNCTION_IMPL(EqualScalar, EqualScalar<ushort>, "cpu:ushort", double)
            // NBLA_REGISTER_FUNCTION_IMPL(EqualScalar, EqualScalar<short>, "cpu:short", double)
            // NBLA_REGISTER_FUNCTION_IMPL(EqualScalar, EqualScalar<uint>, "cpu:uint", double)
            // NBLA_REGISTER_FUNCTION_IMPL(EqualScalar, EqualScalar<int>, "cpu:int", double)
            // NBLA_REGISTER_FUNCTION_IMPL(EqualScalar, EqualScalar<ulong>, "cpu:ulong", double)
            // NBLA_REGISTER_FUNCTION_IMPL(EqualScalar, EqualScalar<long>, "cpu:long", double)
            // NBLA_REGISTER_FUNCTION_IMPL(EqualScalar, EqualScalar<ulonglong>, "cpu:ulonglong", double)
            // NBLA_REGISTER_FUNCTION_IMPL(EqualScalar, EqualScalar<longlong>, "cpu:longlong", double)
            NBLA_REGISTER_FUNCTION_IMPL(EqualScalar, EqualScalar<float>, "cpu:float", double)
            NBLA_REGISTER_FUNCTION_IMPL(EqualScalar, EqualScalar<double>, "cpu:double", double)
            // NBLA_REGISTER_FUNCTION_IMPL(EqualScalar, EqualScalar<longdouble>, "cpu:longdouble", double)

            /*equal*/
            // NBLA_REGISTER_FUNCTION_IMPL(Equal, Equal<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(Equal, Equal<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(Equal, Equal<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(Equal, Equal<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(Equal, Equal<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(Equal, Equal<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(Equal, Equal<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(Equal, Equal<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(Equal, Equal<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(Equal, Equal<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(Equal, Equal<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(Equal, Equal<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(Equal, Equal<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(Equal, Equal<longdouble>, "cpu:longdouble")

            /*exp*/
            // NBLA_REGISTER_FUNCTION_IMPL(Exp, Exp<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(Exp, Exp<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(Exp, Exp<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(Exp, Exp<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(Exp, Exp<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(Exp, Exp<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(Exp, Exp<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(Exp, Exp<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(Exp, Exp<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(Exp, Exp<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(Exp, Exp<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(Exp, Exp<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(Exp, Exp<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(Exp, Exp<longdouble>, "cpu:longdouble")

            /*flip*/
            // NBLA_REGISTER_FUNCTION_IMPL(Flip, Flip<bool>, "cpu:bool", const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Flip, Flip<uchar>, "cpu:ubyte", const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Flip, Flip<char>, "cpu:byte", const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Flip, Flip<ushort>, "cpu:ushort", const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Flip, Flip<short>, "cpu:short", const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Flip, Flip<uint>, "cpu:uint", const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Flip, Flip<int>, "cpu:int", const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Flip, Flip<ulong>, "cpu:ulong", const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Flip, Flip<long>, "cpu:long", const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Flip, Flip<ulonglong>, "cpu:ulonglong", const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Flip, Flip<longlong>, "cpu:longlong", const vector<int64_t> &)
            NBLA_REGISTER_FUNCTION_IMPL(Flip, Flip<float>, "cpu:float", const vector<int64_t> &)
            NBLA_REGISTER_FUNCTION_IMPL(Flip, Flip<double>, "cpu:double", const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Flip, Flip<longdouble>, "cpu:longdouble", const vector<int64_t> &)

            /*floor*/
            // NBLA_REGISTER_FUNCTION_IMPL(Floor, Floor<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(Floor, Floor<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(Floor, Floor<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(Floor, Floor<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(Floor, Floor<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(Floor, Floor<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(Floor, Floor<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(Floor, Floor<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(Floor, Floor<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(Floor, Floor<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(Floor, Floor<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(Floor, Floor<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(Floor, Floor<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(Floor, Floor<longdouble>, "cpu:longdouble")

            /*greater_equal_scalar*/
            // NBLA_REGISTER_FUNCTION_IMPL(GreaterEqualScalar, GreaterEqualScalar<bool>, "cpu:bool", double)
            // NBLA_REGISTER_FUNCTION_IMPL(GreaterEqualScalar, GreaterEqualScalar<uchar>, "cpu:ubyte", double)
            // NBLA_REGISTER_FUNCTION_IMPL(GreaterEqualScalar, GreaterEqualScalar<char>, "cpu:byte", double)
            // NBLA_REGISTER_FUNCTION_IMPL(GreaterEqualScalar, GreaterEqualScalar<ushort>, "cpu:ushort", double)
            // NBLA_REGISTER_FUNCTION_IMPL(GreaterEqualScalar, GreaterEqualScalar<short>, "cpu:short", double)
            // NBLA_REGISTER_FUNCTION_IMPL(GreaterEqualScalar, GreaterEqualScalar<uint>, "cpu:uint", double)
            // NBLA_REGISTER_FUNCTION_IMPL(GreaterEqualScalar, GreaterEqualScalar<int>, "cpu:int", double)
            // NBLA_REGISTER_FUNCTION_IMPL(GreaterEqualScalar, GreaterEqualScalar<ulong>, "cpu:ulong", double)
            // NBLA_REGISTER_FUNCTION_IMPL(GreaterEqualScalar, GreaterEqualScalar<long>, "cpu:long", double)
            // NBLA_REGISTER_FUNCTION_IMPL(GreaterEqualScalar, GreaterEqualScalar<ulonglong>, "cpu:ulonglong", double)
            // NBLA_REGISTER_FUNCTION_IMPL(GreaterEqualScalar, GreaterEqualScalar<longlong>, "cpu:longlong", double)
            NBLA_REGISTER_FUNCTION_IMPL(GreaterEqualScalar, GreaterEqualScalar<float>, "cpu:float", double)
            NBLA_REGISTER_FUNCTION_IMPL(GreaterEqualScalar, GreaterEqualScalar<double>, "cpu:double", double)
            // NBLA_REGISTER_FUNCTION_IMPL(GreaterEqualScalar, GreaterEqualScalar<longdouble>, "cpu:longdouble", double)

            /*greater_equal*/
            // NBLA_REGISTER_FUNCTION_IMPL(GreaterEqual, GreaterEqual<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(GreaterEqual, GreaterEqual<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(GreaterEqual, GreaterEqual<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(GreaterEqual, GreaterEqual<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(GreaterEqual, GreaterEqual<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(GreaterEqual, GreaterEqual<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(GreaterEqual, GreaterEqual<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(GreaterEqual, GreaterEqual<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(GreaterEqual, GreaterEqual<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(GreaterEqual, GreaterEqual<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(GreaterEqual, GreaterEqual<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(GreaterEqual, GreaterEqual<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(GreaterEqual, GreaterEqual<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(GreaterEqual, GreaterEqual<longdouble>, "cpu:longdouble")

            /*greater_scalar*/
            // NBLA_REGISTER_FUNCTION_IMPL(GreaterScalar, GreaterScalar<bool>, "cpu:bool", double)
            // NBLA_REGISTER_FUNCTION_IMPL(GreaterScalar, GreaterScalar<uchar>, "cpu:ubyte", double)
            // NBLA_REGISTER_FUNCTION_IMPL(GreaterScalar, GreaterScalar<char>, "cpu:byte", double)
            // NBLA_REGISTER_FUNCTION_IMPL(GreaterScalar, GreaterScalar<ushort>, "cpu:ushort", double)
            // NBLA_REGISTER_FUNCTION_IMPL(GreaterScalar, GreaterScalar<short>, "cpu:short", double)
            // NBLA_REGISTER_FUNCTION_IMPL(GreaterScalar, GreaterScalar<uint>, "cpu:uint", double)
            // NBLA_REGISTER_FUNCTION_IMPL(GreaterScalar, GreaterScalar<int>, "cpu:int", double)
            // NBLA_REGISTER_FUNCTION_IMPL(GreaterScalar, GreaterScalar<ulong>, "cpu:ulong", double)
            // NBLA_REGISTER_FUNCTION_IMPL(GreaterScalar, GreaterScalar<long>, "cpu:long", double)
            // NBLA_REGISTER_FUNCTION_IMPL(GreaterScalar, GreaterScalar<ulonglong>, "cpu:ulonglong", double)
            // NBLA_REGISTER_FUNCTION_IMPL(GreaterScalar, GreaterScalar<longlong>, "cpu:longlong", double)
            NBLA_REGISTER_FUNCTION_IMPL(GreaterScalar, GreaterScalar<float>, "cpu:float", double)
            NBLA_REGISTER_FUNCTION_IMPL(GreaterScalar, GreaterScalar<double>, "cpu:double", double)
            // NBLA_REGISTER_FUNCTION_IMPL(GreaterScalar, GreaterScalar<longdouble>, "cpu:longdouble", double)

            /*greater*/
            // NBLA_REGISTER_FUNCTION_IMPL(Greater, Greater<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(Greater, Greater<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(Greater, Greater<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(Greater, Greater<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(Greater, Greater<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(Greater, Greater<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(Greater, Greater<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(Greater, Greater<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(Greater, Greater<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(Greater, Greater<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(Greater, Greater<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(Greater, Greater<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(Greater, Greater<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(Greater, Greater<longdouble>, "cpu:longdouble")

            /*isinf*/
            // NBLA_REGISTER_FUNCTION_IMPL(IsInf, IsInf<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(IsInf, IsInf<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(IsInf, IsInf<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(IsInf, IsInf<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(IsInf, IsInf<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(IsInf, IsInf<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(IsInf, IsInf<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(IsInf, IsInf<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(IsInf, IsInf<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(IsInf, IsInf<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(IsInf, IsInf<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(IsInf, IsInf<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(IsInf, IsInf<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(IsInf, IsInf<longdouble>, "cpu:longdouble")

            /*isnan*/
            // NBLA_REGISTER_FUNCTION_IMPL(IsNan, IsNan<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(IsNan, IsNan<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(IsNan, IsNan<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(IsNan, IsNan<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(IsNan, IsNan<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(IsNan, IsNan<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(IsNan, IsNan<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(IsNan, IsNan<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(IsNan, IsNan<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(IsNan, IsNan<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(IsNan, IsNan<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(IsNan, IsNan<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(IsNan, IsNan<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(IsNan, IsNan<longdouble>, "cpu:longdouble")

            /*less_equal_scalar*/
            // NBLA_REGISTER_FUNCTION_IMPL(LessEqualScalar, LessEqualScalar<bool>, "cpu:bool", double)
            // NBLA_REGISTER_FUNCTION_IMPL(LessEqualScalar, LessEqualScalar<uchar>, "cpu:ubyte", double)
            // NBLA_REGISTER_FUNCTION_IMPL(LessEqualScalar, LessEqualScalar<char>, "cpu:byte", double)
            // NBLA_REGISTER_FUNCTION_IMPL(LessEqualScalar, LessEqualScalar<ushort>, "cpu:ushort", double)
            // NBLA_REGISTER_FUNCTION_IMPL(LessEqualScalar, LessEqualScalar<short>, "cpu:short", double)
            // NBLA_REGISTER_FUNCTION_IMPL(LessEqualScalar, LessEqualScalar<uint>, "cpu:uint", double)
            // NBLA_REGISTER_FUNCTION_IMPL(LessEqualScalar, LessEqualScalar<int>, "cpu:int", double)
            // NBLA_REGISTER_FUNCTION_IMPL(LessEqualScalar, LessEqualScalar<ulong>, "cpu:ulong", double)
            // NBLA_REGISTER_FUNCTION_IMPL(LessEqualScalar, LessEqualScalar<long>, "cpu:long", double)
            // NBLA_REGISTER_FUNCTION_IMPL(LessEqualScalar, LessEqualScalar<ulonglong>, "cpu:ulonglong", double)
            // NBLA_REGISTER_FUNCTION_IMPL(LessEqualScalar, LessEqualScalar<longlong>, "cpu:longlong", double)
            NBLA_REGISTER_FUNCTION_IMPL(LessEqualScalar, LessEqualScalar<float>, "cpu:float", double)
            NBLA_REGISTER_FUNCTION_IMPL(LessEqualScalar, LessEqualScalar<double>, "cpu:double", double)
            // NBLA_REGISTER_FUNCTION_IMPL(LessEqualScalar, LessEqualScalar<longdouble>, "cpu:longdouble", double)

            /*less_equal*/
            // NBLA_REGISTER_FUNCTION_IMPL(LessEqual, LessEqual<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(LessEqual, LessEqual<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(LessEqual, LessEqual<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(LessEqual, LessEqual<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(LessEqual, LessEqual<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(LessEqual, LessEqual<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(LessEqual, LessEqual<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(LessEqual, LessEqual<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(LessEqual, LessEqual<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(LessEqual, LessEqual<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(LessEqual, LessEqual<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(LessEqual, LessEqual<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(LessEqual, LessEqual<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(LessEqual, LessEqual<longdouble>, "cpu:longdouble")

            /*less_scalar*/
            // NBLA_REGISTER_FUNCTION_IMPL(LessScalar, LessScalar<bool>, "cpu:bool", double)
            // NBLA_REGISTER_FUNCTION_IMPL(LessScalar, LessScalar<uchar>, "cpu:ubyte", double)
            // NBLA_REGISTER_FUNCTION_IMPL(LessScalar, LessScalar<char>, "cpu:byte", double)
            // NBLA_REGISTER_FUNCTION_IMPL(LessScalar, LessScalar<ushort>, "cpu:ushort", double)
            // NBLA_REGISTER_FUNCTION_IMPL(LessScalar, LessScalar<short>, "cpu:short", double)
            // NBLA_REGISTER_FUNCTION_IMPL(LessScalar, LessScalar<uint>, "cpu:uint", double)
            // NBLA_REGISTER_FUNCTION_IMPL(LessScalar, LessScalar<int>, "cpu:int", double)
            // NBLA_REGISTER_FUNCTION_IMPL(LessScalar, LessScalar<ulong>, "cpu:ulong", double)
            // NBLA_REGISTER_FUNCTION_IMPL(LessScalar, LessScalar<long>, "cpu:long", double)
            // NBLA_REGISTER_FUNCTION_IMPL(LessScalar, LessScalar<ulonglong>, "cpu:ulonglong", double)
            // NBLA_REGISTER_FUNCTION_IMPL(LessScalar, LessScalar<longlong>, "cpu:longlong", double)
            NBLA_REGISTER_FUNCTION_IMPL(LessScalar, LessScalar<float>, "cpu:float", double)
            NBLA_REGISTER_FUNCTION_IMPL(LessScalar, LessScalar<double>, "cpu:double", double)
            // NBLA_REGISTER_FUNCTION_IMPL(LessScalar, LessScalar<longdouble>, "cpu:longdouble", double)

            /*less*/
            // NBLA_REGISTER_FUNCTION_IMPL(Less, Less<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(Less, Less<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(Less, Less<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(Less, Less<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(Less, Less<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(Less, Less<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(Less, Less<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(Less, Less<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(Less, Less<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(Less, Less<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(Less, Less<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(Less, Less<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(Less, Less<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(Less, Less<longdouble>, "cpu:longdouble")

            /*log*/
            // NBLA_REGISTER_FUNCTION_IMPL(Log, Log<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(Log, Log<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(Log, Log<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(Log, Log<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(Log, Log<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(Log, Log<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(Log, Log<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(Log, Log<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(Log, Log<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(Log, Log<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(Log, Log<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(Log, Log<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(Log, Log<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(Log, Log<longdouble>, "cpu:longdouble")

            /*log1p*/
            // NBLA_REGISTER_FUNCTION_IMPL(Log1p, Log1p<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(Log1p, Log1p<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(Log1p, Log1p<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(Log1p, Log1p<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(Log1p, Log1p<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(Log1p, Log1p<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(Log1p, Log1p<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(Log1p, Log1p<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(Log1p, Log1p<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(Log1p, Log1p<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(Log1p, Log1p<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(Log1p, Log1p<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(Log1p, Log1p<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(Log1p, Log1p<longdouble>, "cpu:longdouble")

            /*log2*/
            // NBLA_REGISTER_FUNCTION_IMPL(Log2, Log2<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(Log2, Log2<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(Log2, Log2<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(Log2, Log2<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(Log2, Log2<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(Log2, Log2<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(Log2, Log2<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(Log2, Log2<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(Log2, Log2<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(Log2, Log2<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(Log2, Log2<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(Log2, Log2<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(Log2, Log2<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(Log2, Log2<longdouble>, "cpu:longdouble")

            /*log10*/
            // NBLA_REGISTER_FUNCTION_IMPL(Log10, Log10<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(Log10, Log10<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(Log10, Log10<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(Log10, Log10<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(Log10, Log10<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(Log10, Log10<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(Log10, Log10<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(Log10, Log10<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(Log10, Log10<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(Log10, Log10<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(Log10, Log10<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(Log10, Log10<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(Log10, Log10<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(Log10, Log10<longdouble>, "cpu:longdouble")

            /*logical_and_scalar*/
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalAndScalar, LogicalAndScalar<bool>, "cpu:bool", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalAndScalar, LogicalAndScalar<uchar>, "cpu:ubyte", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalAndScalar, LogicalAndScalar<char>, "cpu:byte", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalAndScalar, LogicalAndScalar<ushort>, "cpu:ushort", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalAndScalar, LogicalAndScalar<short>, "cpu:short", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalAndScalar, LogicalAndScalar<uint>, "cpu:uint", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalAndScalar, LogicalAndScalar<int>, "cpu:int", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalAndScalar, LogicalAndScalar<ulong>, "cpu:ulong", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalAndScalar, LogicalAndScalar<long>, "cpu:long", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalAndScalar, LogicalAndScalar<ulonglong>, "cpu:ulonglong", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalAndScalar, LogicalAndScalar<longlong>, "cpu:longlong", bool)
            NBLA_REGISTER_FUNCTION_IMPL(LogicalAndScalar, LogicalAndScalar<float>, "cpu:float", bool)
            NBLA_REGISTER_FUNCTION_IMPL(LogicalAndScalar, LogicalAndScalar<double>, "cpu:double", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalAndScalar, LogicalAndScalar<longdouble>, "cpu:longdouble", bool)

            /*logical_and*/
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalAnd, LogicalAnd<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalAnd, LogicalAnd<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalAnd, LogicalAnd<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalAnd, LogicalAnd<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalAnd, LogicalAnd<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalAnd, LogicalAnd<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalAnd, LogicalAnd<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalAnd, LogicalAnd<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalAnd, LogicalAnd<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalAnd, LogicalAnd<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalAnd, LogicalAnd<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(LogicalAnd, LogicalAnd<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(LogicalAnd, LogicalAnd<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalAnd, LogicalAnd<longdouble>, "cpu:longdouble")

            /*logical_not*/
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalNot, LogicalNot<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalNot, LogicalNot<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalNot, LogicalNot<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalNot, LogicalNot<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalNot, LogicalNot<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalNot, LogicalNot<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalNot, LogicalNot<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalNot, LogicalNot<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalNot, LogicalNot<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalNot, LogicalNot<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalNot, LogicalNot<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(LogicalNot, LogicalNot<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(LogicalNot, LogicalNot<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalNot, LogicalNot<longdouble>, "cpu:longdouble")

            /*logical_or_scalar*/
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalOrScalar, LogicalOrScalar<bool>, "cpu:bool", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalOrScalar, LogicalOrScalar<uchar>, "cpu:ubyte", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalOrScalar, LogicalOrScalar<char>, "cpu:byte", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalOrScalar, LogicalOrScalar<ushort>, "cpu:ushort", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalOrScalar, LogicalOrScalar<short>, "cpu:short", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalOrScalar, LogicalOrScalar<uint>, "cpu:uint", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalOrScalar, LogicalOrScalar<int>, "cpu:int", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalOrScalar, LogicalOrScalar<ulong>, "cpu:ulong", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalOrScalar, LogicalOrScalar<long>, "cpu:long", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalOrScalar, LogicalOrScalar<ulonglong>, "cpu:ulonglong", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalOrScalar, LogicalOrScalar<longlong>, "cpu:longlong", bool)
            NBLA_REGISTER_FUNCTION_IMPL(LogicalOrScalar, LogicalOrScalar<float>, "cpu:float", bool)
            NBLA_REGISTER_FUNCTION_IMPL(LogicalOrScalar, LogicalOrScalar<double>, "cpu:double", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalOrScalar, LogicalOrScalar<longdouble>, "cpu:longdouble", bool)

            /*logical_or*/
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalOr, LogicalOr<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalOr, LogicalOr<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalOr, LogicalOr<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalOr, LogicalOr<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalOr, LogicalOr<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalOr, LogicalOr<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalOr, LogicalOr<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalOr, LogicalOr<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalOr, LogicalOr<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalOr, LogicalOr<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalOr, LogicalOr<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(LogicalOr, LogicalOr<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(LogicalOr, LogicalOr<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalOr, LogicalOr<longdouble>, "cpu:longdouble")

            /*logical_xor_scalar*/
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalXorScalar, LogicalXorScalar<bool>, "cpu:bool", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalXorScalar, LogicalXorScalar<uchar>, "cpu:ubyte", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalXorScalar, LogicalXorScalar<char>, "cpu:byte", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalXorScalar, LogicalXorScalar<ushort>, "cpu:ushort", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalXorScalar, LogicalXorScalar<short>, "cpu:short", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalXorScalar, LogicalXorScalar<uint>, "cpu:uint", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalXorScalar, LogicalXorScalar<int>, "cpu:int", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalXorScalar, LogicalXorScalar<ulong>, "cpu:ulong", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalXorScalar, LogicalXorScalar<long>, "cpu:long", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalXorScalar, LogicalXorScalar<ulonglong>, "cpu:ulonglong", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalXorScalar, LogicalXorScalar<longlong>, "cpu:longlong", bool)
            NBLA_REGISTER_FUNCTION_IMPL(LogicalXorScalar, LogicalXorScalar<float>, "cpu:float", bool)
            NBLA_REGISTER_FUNCTION_IMPL(LogicalXorScalar, LogicalXorScalar<double>, "cpu:double", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalXorScalar, LogicalXorScalar<longdouble>, "cpu:longdouble", bool)

            /*logical_xor*/
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalXor, LogicalXor<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalXor, LogicalXor<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalXor, LogicalXor<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalXor, LogicalXor<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalXor, LogicalXor<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalXor, LogicalXor<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalXor, LogicalXor<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalXor, LogicalXor<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalXor, LogicalXor<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalXor, LogicalXor<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalXor, LogicalXor<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(LogicalXor, LogicalXor<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(LogicalXor, LogicalXor<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(LogicalXor, LogicalXor<longdouble>, "cpu:longdouble")

            /*matrix_diag_part*/
            // NBLA_REGISTER_FUNCTION_IMPL(MatrixDiagPart, MatrixDiagPart<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(MatrixDiagPart, MatrixDiagPart<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(MatrixDiagPart, MatrixDiagPart<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(MatrixDiagPart, MatrixDiagPart<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(MatrixDiagPart, MatrixDiagPart<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(MatrixDiagPart, MatrixDiagPart<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(MatrixDiagPart, MatrixDiagPart<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(MatrixDiagPart, MatrixDiagPart<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(MatrixDiagPart, MatrixDiagPart<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(MatrixDiagPart, MatrixDiagPart<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(MatrixDiagPart, MatrixDiagPart<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(MatrixDiagPart, MatrixDiagPart<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(MatrixDiagPart, MatrixDiagPart<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(MatrixDiagPart, MatrixDiagPart<longdouble>, "cpu:longdouble")

            /*matrix_diag*/
            // NBLA_REGISTER_FUNCTION_IMPL(MatrixDiag, MatrixDiag<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(MatrixDiag, MatrixDiag<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(MatrixDiag, MatrixDiag<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(MatrixDiag, MatrixDiag<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(MatrixDiag, MatrixDiag<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(MatrixDiag, MatrixDiag<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(MatrixDiag, MatrixDiag<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(MatrixDiag, MatrixDiag<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(MatrixDiag, MatrixDiag<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(MatrixDiag, MatrixDiag<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(MatrixDiag, MatrixDiag<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(MatrixDiag, MatrixDiag<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(MatrixDiag, MatrixDiag<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(MatrixDiag, MatrixDiag<longdouble>, "cpu:longdouble")

            /*max*/
            // NBLA_REGISTER_FUNCTION_IMPL(Max, Max<bool>, "cpu:bool", const vector<int64_t> &, bool, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Max, Max<uchar>, "cpu:ubyte", const vector<int64_t> &, bool, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Max, Max<char>, "cpu:byte", const vector<int64_t> &, bool, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Max, Max<ushort>, "cpu:ushort", const vector<int64_t> &, bool, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Max, Max<short>, "cpu:short", const vector<int64_t> &, bool, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Max, Max<uint>, "cpu:uint", const vector<int64_t> &, bool, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Max, Max<int>, "cpu:int", const vector<int64_t> &, bool, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Max, Max<ulong>, "cpu:ulong", const vector<int64_t> &, bool, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Max, Max<long>, "cpu:long", const vector<int64_t> &, bool, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Max, Max<ulonglong>, "cpu:ulonglong", const vector<int64_t> &, bool, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Max, Max<longlong>, "cpu:longlong", const vector<int64_t> &, bool, bool, bool)
            NBLA_REGISTER_FUNCTION_IMPL(Max, Max<float>, "cpu:float", const vector<int64_t> &, bool, bool, bool)
            NBLA_REGISTER_FUNCTION_IMPL(Max, Max<double>, "cpu:double", const vector<int64_t> &, bool, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Max, Max<longdouble>, "cpu:longdouble", const vector<int64_t> &, bool, bool, bool)

            /*maximum_scalar*/
            // NBLA_REGISTER_FUNCTION_IMPL(MaximumScalar, MaximumScalar<bool>, "cpu:bool", double)
            // NBLA_REGISTER_FUNCTION_IMPL(MaximumScalar, MaximumScalar<uchar>, "cpu:ubyte", double)
            // NBLA_REGISTER_FUNCTION_IMPL(MaximumScalar, MaximumScalar<char>, "cpu:byte", double)
            // NBLA_REGISTER_FUNCTION_IMPL(MaximumScalar, MaximumScalar<ushort>, "cpu:ushort", double)
            // NBLA_REGISTER_FUNCTION_IMPL(MaximumScalar, MaximumScalar<short>, "cpu:short", double)
            // NBLA_REGISTER_FUNCTION_IMPL(MaximumScalar, MaximumScalar<uint>, "cpu:uint", double)
            // NBLA_REGISTER_FUNCTION_IMPL(MaximumScalar, MaximumScalar<int>, "cpu:int", double)
            // NBLA_REGISTER_FUNCTION_IMPL(MaximumScalar, MaximumScalar<ulong>, "cpu:ulong", double)
            // NBLA_REGISTER_FUNCTION_IMPL(MaximumScalar, MaximumScalar<long>, "cpu:long", double)
            // NBLA_REGISTER_FUNCTION_IMPL(MaximumScalar, MaximumScalar<ulonglong>, "cpu:ulonglong", double)
            // NBLA_REGISTER_FUNCTION_IMPL(MaximumScalar, MaximumScalar<longlong>, "cpu:longlong", double)
            NBLA_REGISTER_FUNCTION_IMPL(MaximumScalar, MaximumScalar<float>, "cpu:float", double)
            NBLA_REGISTER_FUNCTION_IMPL(MaximumScalar, MaximumScalar<double>, "cpu:double", double)
            // NBLA_REGISTER_FUNCTION_IMPL(MaximumScalar, MaximumScalar<longdouble>, "cpu:longdouble", double)

            /*maximum2*/
            // NBLA_REGISTER_FUNCTION_IMPL(Maximum2, Maximum2<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(Maximum2, Maximum2<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(Maximum2, Maximum2<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(Maximum2, Maximum2<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(Maximum2, Maximum2<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(Maximum2, Maximum2<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(Maximum2, Maximum2<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(Maximum2, Maximum2<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(Maximum2, Maximum2<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(Maximum2, Maximum2<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(Maximum2, Maximum2<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(Maximum2, Maximum2<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(Maximum2, Maximum2<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(Maximum2, Maximum2<longdouble>, "cpu:longdouble")

            /*mean*/
            // NBLA_REGISTER_FUNCTION_IMPL(Mean, Mean<bool>, "cpu:bool", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Mean, Mean<uchar>, "cpu:ubyte", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Mean, Mean<char>, "cpu:byte", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Mean, Mean<ushort>, "cpu:ushort", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Mean, Mean<short>, "cpu:short", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Mean, Mean<uint>, "cpu:uint", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Mean, Mean<int>, "cpu:int", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Mean, Mean<ulong>, "cpu:ulong", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Mean, Mean<long>, "cpu:long", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Mean, Mean<ulonglong>, "cpu:ulonglong", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Mean, Mean<longlong>, "cpu:longlong", const vector<int64_t> &, bool)
            NBLA_REGISTER_FUNCTION_IMPL(Mean, Mean<float>, "cpu:float", const vector<int64_t> &, bool)
            NBLA_REGISTER_FUNCTION_IMPL(Mean, Mean<double>, "cpu:double", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Mean, Mean<longdouble>, "cpu:longdouble", const vector<int64_t> &, bool)

            /*min*/
            // NBLA_REGISTER_FUNCTION_IMPL(Min, Min<bool>, "cpu:bool", const vector<int64_t> &, bool, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Min, Min<uchar>, "cpu:ubyte", const vector<int64_t> &, bool, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Min, Min<char>, "cpu:byte", const vector<int64_t> &, bool, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Min, Min<ushort>, "cpu:ushort", const vector<int64_t> &, bool, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Min, Min<short>, "cpu:short", const vector<int64_t> &, bool, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Min, Min<uint>, "cpu:uint", const vector<int64_t> &, bool, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Min, Min<int>, "cpu:int", const vector<int64_t> &, bool, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Min, Min<ulong>, "cpu:ulong", const vector<int64_t> &, bool, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Min, Min<long>, "cpu:long", const vector<int64_t> &, bool, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Min, Min<ulonglong>, "cpu:ulonglong", const vector<int64_t> &, bool, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Min, Min<longlong>, "cpu:longlong", const vector<int64_t> &, bool, bool, bool)
            NBLA_REGISTER_FUNCTION_IMPL(Min, Min<float>, "cpu:float", const vector<int64_t> &, bool, bool, bool)
            NBLA_REGISTER_FUNCTION_IMPL(Min, Min<double>, "cpu:double", const vector<int64_t> &, bool, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Min, Min<longdouble>, "cpu:longdouble", const vector<int64_t> &, bool, bool, bool)

            /*minimum_scalar*/
            // NBLA_REGISTER_FUNCTION_IMPL(MinimumScalar, MinimumScalar<bool>, "cpu:bool", double)
            // NBLA_REGISTER_FUNCTION_IMPL(MinimumScalar, MinimumScalar<uchar>, "cpu:ubyte", double)
            // NBLA_REGISTER_FUNCTION_IMPL(MinimumScalar, MinimumScalar<char>, "cpu:byte", double)
            // NBLA_REGISTER_FUNCTION_IMPL(MinimumScalar, MinimumScalar<ushort>, "cpu:ushort", double)
            // NBLA_REGISTER_FUNCTION_IMPL(MinimumScalar, MinimumScalar<short>, "cpu:short", double)
            // NBLA_REGISTER_FUNCTION_IMPL(MinimumScalar, MinimumScalar<uint>, "cpu:uint", double)
            // NBLA_REGISTER_FUNCTION_IMPL(MinimumScalar, MinimumScalar<int>, "cpu:int", double)
            // NBLA_REGISTER_FUNCTION_IMPL(MinimumScalar, MinimumScalar<ulong>, "cpu:ulong", double)
            // NBLA_REGISTER_FUNCTION_IMPL(MinimumScalar, MinimumScalar<long>, "cpu:long", double)
            // NBLA_REGISTER_FUNCTION_IMPL(MinimumScalar, MinimumScalar<ulonglong>, "cpu:ulonglong", double)
            // NBLA_REGISTER_FUNCTION_IMPL(MinimumScalar, MinimumScalar<longlong>, "cpu:longlong", double)
            NBLA_REGISTER_FUNCTION_IMPL(MinimumScalar, MinimumScalar<float>, "cpu:float", double)
            NBLA_REGISTER_FUNCTION_IMPL(MinimumScalar, MinimumScalar<double>, "cpu:double", double)
            // NBLA_REGISTER_FUNCTION_IMPL(MinimumScalar, MinimumScalar<longdouble>, "cpu:longdouble", double)

            /*minimum2*/
            // NBLA_REGISTER_FUNCTION_IMPL(Minimum2, Minimum2<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(Minimum2, Minimum2<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(Minimum2, Minimum2<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(Minimum2, Minimum2<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(Minimum2, Minimum2<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(Minimum2, Minimum2<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(Minimum2, Minimum2<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(Minimum2, Minimum2<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(Minimum2, Minimum2<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(Minimum2, Minimum2<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(Minimum2, Minimum2<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(Minimum2, Minimum2<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(Minimum2, Minimum2<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(Minimum2, Minimum2<longdouble>, "cpu:longdouble")

            /*mul_scalar*/
            // NBLA_REGISTER_FUNCTION_IMPL(MulScalar, MulScalar<bool>, "cpu:bool", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(MulScalar, MulScalar<uchar>, "cpu:ubyte", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(MulScalar, MulScalar<char>, "cpu:byte", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(MulScalar, MulScalar<ushort>, "cpu:ushort", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(MulScalar, MulScalar<short>, "cpu:short", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(MulScalar, MulScalar<uint>, "cpu:uint", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(MulScalar, MulScalar<int>, "cpu:int", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(MulScalar, MulScalar<ulong>, "cpu:ulong", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(MulScalar, MulScalar<long>, "cpu:long", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(MulScalar, MulScalar<ulonglong>, "cpu:ulonglong", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(MulScalar, MulScalar<longlong>, "cpu:longlong", double, bool)
            NBLA_REGISTER_FUNCTION_IMPL(MulScalar, MulScalar<float>, "cpu:float", double, bool)
            NBLA_REGISTER_FUNCTION_IMPL(MulScalar, MulScalar<double>, "cpu:double", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(MulScalar, MulScalar<longdouble>, "cpu:longdouble", double, bool)

            /*mul2*/
            // NBLA_REGISTER_FUNCTION_IMPL(Mul2, Mul2<bool>, "cpu:bool", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Mul2, Mul2<uchar>, "cpu:ubyte", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Mul2, Mul2<char>, "cpu:byte", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Mul2, Mul2<ushort>, "cpu:ushort", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Mul2, Mul2<short>, "cpu:short", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Mul2, Mul2<uint>, "cpu:uint", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Mul2, Mul2<int>, "cpu:int", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Mul2, Mul2<ulong>, "cpu:ulong", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Mul2, Mul2<long>, "cpu:long", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Mul2, Mul2<ulonglong>, "cpu:ulonglong", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Mul2, Mul2<longlong>, "cpu:longlong", bool)
            NBLA_REGISTER_FUNCTION_IMPL(Mul2, Mul2<float>, "cpu:float", bool)
            NBLA_REGISTER_FUNCTION_IMPL(Mul2, Mul2<double>, "cpu:double", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Mul2, Mul2<longdouble>, "cpu:longdouble", bool)

            /*not_equal_scalar*/
            // NBLA_REGISTER_FUNCTION_IMPL(NotEqualScalar, NotEqualScalar<bool>, "cpu:bool", double)
            // NBLA_REGISTER_FUNCTION_IMPL(NotEqualScalar, NotEqualScalar<uchar>, "cpu:ubyte", double)
            // NBLA_REGISTER_FUNCTION_IMPL(NotEqualScalar, NotEqualScalar<char>, "cpu:byte", double)
            // NBLA_REGISTER_FUNCTION_IMPL(NotEqualScalar, NotEqualScalar<ushort>, "cpu:ushort", double)
            // NBLA_REGISTER_FUNCTION_IMPL(NotEqualScalar, NotEqualScalar<short>, "cpu:short", double)
            // NBLA_REGISTER_FUNCTION_IMPL(NotEqualScalar, NotEqualScalar<uint>, "cpu:uint", double)
            // NBLA_REGISTER_FUNCTION_IMPL(NotEqualScalar, NotEqualScalar<int>, "cpu:int", double)
            // NBLA_REGISTER_FUNCTION_IMPL(NotEqualScalar, NotEqualScalar<ulong>, "cpu:ulong", double)
            // NBLA_REGISTER_FUNCTION_IMPL(NotEqualScalar, NotEqualScalar<long>, "cpu:long", double)
            // NBLA_REGISTER_FUNCTION_IMPL(NotEqualScalar, NotEqualScalar<ulonglong>, "cpu:ulonglong", double)
            // NBLA_REGISTER_FUNCTION_IMPL(NotEqualScalar, NotEqualScalar<longlong>, "cpu:longlong", double)
            NBLA_REGISTER_FUNCTION_IMPL(NotEqualScalar, NotEqualScalar<float>, "cpu:float", double)
            NBLA_REGISTER_FUNCTION_IMPL(NotEqualScalar, NotEqualScalar<double>, "cpu:double", double)
            // NBLA_REGISTER_FUNCTION_IMPL(NotEqualScalar, NotEqualScalar<longdouble>, "cpu:longdouble", double)

            /*not_scalar*/
            // NBLA_REGISTER_FUNCTION_IMPL(NotEqual, NotEqual<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(NotEqual, NotEqual<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(NotEqual, NotEqual<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(NotEqual, NotEqual<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(NotEqual, NotEqual<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(NotEqual, NotEqual<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(NotEqual, NotEqual<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(NotEqual, NotEqual<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(NotEqual, NotEqual<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(NotEqual, NotEqual<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(NotEqual, NotEqual<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(NotEqual, NotEqual<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(NotEqual, NotEqual<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(NotEqual, NotEqual<longdouble>, "cpu:longdouble")

            /*pow_scalar*/
            // NBLA_REGISTER_FUNCTION_IMPL(PowScalar, PowScalar<bool>, "cpu:bool", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(PowScalar, PowScalar<uchar>, "cpu:ubyte", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(PowScalar, PowScalar<char>, "cpu:byte", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(PowScalar, PowScalar<ushort>, "cpu:ushort", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(PowScalar, PowScalar<short>, "cpu:short", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(PowScalar, PowScalar<uint>, "cpu:uint", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(PowScalar, PowScalar<int>, "cpu:int", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(PowScalar, PowScalar<ulong>, "cpu:ulong", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(PowScalar, PowScalar<long>, "cpu:long", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(PowScalar, PowScalar<ulonglong>, "cpu:ulonglong", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(PowScalar, PowScalar<longlong>, "cpu:longlong", double, bool)
            NBLA_REGISTER_FUNCTION_IMPL(PowScalar, PowScalar<float>, "cpu:float", double, bool)
            NBLA_REGISTER_FUNCTION_IMPL(PowScalar, PowScalar<double>, "cpu:double", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(PowScalar, PowScalar<longdouble>, "cpu:longdouble", double, bool)

            /*pow2*/
            // NBLA_REGISTER_FUNCTION_IMPL(Pow2, Pow2<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(Pow2, Pow2<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(Pow2, Pow2<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(Pow2, Pow2<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(Pow2, Pow2<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(Pow2, Pow2<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(Pow2, Pow2<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(Pow2, Pow2<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(Pow2, Pow2<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(Pow2, Pow2<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(Pow2, Pow2<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(Pow2, Pow2<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(Pow2, Pow2<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(Pow2, Pow2<longdouble>, "cpu:longdouble")

            /*prod*/
            // NBLA_REGISTER_FUNCTION_IMPL(Prod, Prod<bool>, "cpu:bool", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Prod, Prod<uchar>, "cpu:ubyte", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Prod, Prod<char>, "cpu:byte", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Prod, Prod<ushort>, "cpu:ushort", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Prod, Prod<short>, "cpu:short", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Prod, Prod<uint>, "cpu:uint", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Prod, Prod<int>, "cpu:int", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Prod, Prod<ulong>, "cpu:ulong", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Prod, Prod<long>, "cpu:long", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Prod, Prod<ulonglong>, "cpu:ulonglong", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Prod, Prod<longlong>, "cpu:longlong", const vector<int64_t> &, bool)
            NBLA_REGISTER_FUNCTION_IMPL(Prod, Prod<float>, "cpu:float", const vector<int64_t> &, bool)
            NBLA_REGISTER_FUNCTION_IMPL(Prod, Prod<double>, "cpu:double", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Prod, Prod<longdouble>, "cpu:longdouble", const vector<int64_t> &, bool)

            /*r_div_scalar*/
            // NBLA_REGISTER_FUNCTION_IMPL(RDivScalar, RDivScalar<bool>, "cpu:bool", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(RDivScalar, RDivScalar<uchar>, "cpu:ubyte", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(RDivScalar, RDivScalar<char>, "cpu:byte", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(RDivScalar, RDivScalar<ushort>, "cpu:ushort", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(RDivScalar, RDivScalar<short>, "cpu:short", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(RDivScalar, RDivScalar<uint>, "cpu:uint", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(RDivScalar, RDivScalar<int>, "cpu:int", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(RDivScalar, RDivScalar<ulong>, "cpu:ulong", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(RDivScalar, RDivScalar<long>, "cpu:long", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(RDivScalar, RDivScalar<ulonglong>, "cpu:ulonglong", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(RDivScalar, RDivScalar<longlong>, "cpu:longlong", double, bool)
            NBLA_REGISTER_FUNCTION_IMPL(RDivScalar, RDivScalar<float>, "cpu:float", double, bool)
            NBLA_REGISTER_FUNCTION_IMPL(RDivScalar, RDivScalar<double>, "cpu:double", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(RDivScalar, RDivScalar<longdouble>, "cpu:longdouble", double, bool)

            /*r_pow_scalar*/
            // NBLA_REGISTER_FUNCTION_IMPL(RPowScalar, RPowScalar<bool>, "cpu:bool", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(RPowScalar, RPowScalar<uchar>, "cpu:ubyte", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(RPowScalar, RPowScalar<char>, "cpu:byte", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(RPowScalar, RPowScalar<ushort>, "cpu:ushort", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(RPowScalar, RPowScalar<short>, "cpu:short", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(RPowScalar, RPowScalar<uint>, "cpu:uint", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(RPowScalar, RPowScalar<int>, "cpu:int", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(RPowScalar, RPowScalar<ulong>, "cpu:ulong", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(RPowScalar, RPowScalar<long>, "cpu:long", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(RPowScalar, RPowScalar<ulonglong>, "cpu:ulonglong", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(RPowScalar, RPowScalar<longlong>, "cpu:longlong", double, bool)
            NBLA_REGISTER_FUNCTION_IMPL(RPowScalar, RPowScalar<float>, "cpu:float", double, bool)
            NBLA_REGISTER_FUNCTION_IMPL(RPowScalar, RPowScalar<double>, "cpu:double", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(RPowScalar, RPowScalar<longdouble>, "cpu:longdouble", double, bool)

            /*r_sub_scalar*/
            // NBLA_REGISTER_FUNCTION_IMPL(RSubScalar, RSubScalar<bool>, "cpu:bool", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(RSubScalar, RSubScalar<uchar>, "cpu:ubyte", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(RSubScalar, RSubScalar<char>, "cpu:byte", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(RSubScalar, RSubScalar<ushort>, "cpu:ushort", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(RSubScalar, RSubScalar<short>, "cpu:short", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(RSubScalar, RSubScalar<uint>, "cpu:uint", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(RSubScalar, RSubScalar<int>, "cpu:int", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(RSubScalar, RSubScalar<ulong>, "cpu:ulong", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(RSubScalar, RSubScalar<long>, "cpu:long", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(RSubScalar, RSubScalar<ulonglong>, "cpu:ulonglong", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(RSubScalar, RSubScalar<longlong>, "cpu:longlong", double, bool)
            NBLA_REGISTER_FUNCTION_IMPL(RSubScalar, RSubScalar<float>, "cpu:float", double, bool)
            NBLA_REGISTER_FUNCTION_IMPL(RSubScalar, RSubScalar<double>, "cpu:double", double, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(RSubScalar, RSubScalar<longdouble>, "cpu:longdouble", double, bool)

            /*rand*/
            // NBLA_REGISTER_FUNCTION_IMPL(Rand, Rand<bool>, "cpu:bool", float, float, const vector<int64_t> &, int)
            // NBLA_REGISTER_FUNCTION_IMPL(Rand, Rand<uchar>, "cpu:ubyte", float, float, const vector<int64_t> &, int)
            // NBLA_REGISTER_FUNCTION_IMPL(Rand, Rand<char>, "cpu:byte", float, float, const vector<int64_t> &, int)
            // NBLA_REGISTER_FUNCTION_IMPL(Rand, Rand<ushort>, "cpu:ushort", float, float, const vector<int64_t> &, int)
            // NBLA_REGISTER_FUNCTION_IMPL(Rand, Rand<short>, "cpu:short", float, float, const vector<int64_t> &, int)
            // NBLA_REGISTER_FUNCTION_IMPL(Rand, Rand<uint>, "cpu:uint", float, float, const vector<int64_t> &, int)
            // NBLA_REGISTER_FUNCTION_IMPL(Rand, Rand<int>, "cpu:int", float, float, const vector<int64_t> &, int)
            // NBLA_REGISTER_FUNCTION_IMPL(Rand, Rand<ulong>, "cpu:ulong", float, float, const vector<int64_t> &, int)
            // NBLA_REGISTER_FUNCTION_IMPL(Rand, Rand<long>, "cpu:long", float, float, const vector<int64_t> &, int)
            // NBLA_REGISTER_FUNCTION_IMPL(Rand, Rand<ulonglong>, "cpu:ulonglong", float, float, const vector<int64_t> &, int)
            // NBLA_REGISTER_FUNCTION_IMPL(Rand, Rand<longlong>, "cpu:longlong", float, float, const vector<int64_t> &, int)
            NBLA_REGISTER_FUNCTION_IMPL(Rand, Rand<float>, "cpu:float", float, float, const vector<int64_t> &, int)
            NBLA_REGISTER_FUNCTION_IMPL(Rand, Rand<double>, "cpu:double", float, float, const vector<int64_t> &, int)
            // NBLA_REGISTER_FUNCTION_IMPL(Rand, Rand<longdouble>, "cpu:longdouble", float, float, const vector<int64_t> &, int)

            /*randint*/
            // NBLA_REGISTER_FUNCTION_IMPL(Randint, Randint<bool>, "cpu:bool", int, int, const vector<int64_t> &, int)
            // NBLA_REGISTER_FUNCTION_IMPL(Randint, Randint<uchar>, "cpu:ubyte", int, int, const vector<int64_t> &, int)
            // NBLA_REGISTER_FUNCTION_IMPL(Randint, Randint<char>, "cpu:byte", int, int, const vector<int64_t> &, int)
            // NBLA_REGISTER_FUNCTION_IMPL(Randint, Randint<ushort>, "cpu:ushort", int, int, const vector<int64_t> &, int)
            // NBLA_REGISTER_FUNCTION_IMPL(Randint, Randint<short>, "cpu:short", int, int, const vector<int64_t> &, int)
            // NBLA_REGISTER_FUNCTION_IMPL(Randint, Randint<uint>, "cpu:uint", int, int, const vector<int64_t> &, int)
            // NBLA_REGISTER_FUNCTION_IMPL(Randint, Randint<int>, "cpu:int", int, int, const vector<int64_t> &, int)
            // NBLA_REGISTER_FUNCTION_IMPL(Randint, Randint<ulong>, "cpu:ulong", int, int, const vector<int64_t> &, int)
            // NBLA_REGISTER_FUNCTION_IMPL(Randint, Randint<long>, "cpu:long", int, int, const vector<int64_t> &, int)
            // NBLA_REGISTER_FUNCTION_IMPL(Randint, Randint<ulonglong>, "cpu:ulonglong", int, int, const vector<int64_t> &, int)
            // NBLA_REGISTER_FUNCTION_IMPL(Randint, Randint<longlong>, "cpu:longlong", int, int, const vector<int64_t> &, int)
            NBLA_REGISTER_FUNCTION_IMPL(Randint, Randint<float>, "cpu:float", int, int, const vector<int64_t> &, int)
            NBLA_REGISTER_FUNCTION_IMPL(Randint, Randint<double>, "cpu:double", int, int, const vector<int64_t> &, int)
            // NBLA_REGISTER_FUNCTION_IMPL(Randint, Randint<longdouble>, "cpu:longdouble", int, int, const vector<int64_t> &, int)
            
            /*randn*/
            // NBLA_REGISTER_FUNCTION_IMPL(Randn, Randn<bool>, "cpu:bool", float, float, const vector<int64_t>& ,int)
            // NBLA_REGISTER_FUNCTION_IMPL(Randn, Randn<uchar>, "cpu:ubyte", float, float, const vector<int64_t>& ,int)
            // NBLA_REGISTER_FUNCTION_IMPL(Randn, Randn<char>, "cpu:byte", float, float, const vector<int64_t>& ,int)
            // NBLA_REGISTER_FUNCTION_IMPL(Randn, Randn<ushort>, "cpu:ushort", float, float, const vector<int64_t>& ,int)
            // NBLA_REGISTER_FUNCTION_IMPL(Randn, Randn<short>, "cpu:short", float, float, const vector<int64_t>& ,int)
            // NBLA_REGISTER_FUNCTION_IMPL(Randn, Randn<uint>, "cpu:uint", float, float, const vector<int64_t>& ,int)
            // NBLA_REGISTER_FUNCTION_IMPL(Randn, Randn<int>, "cpu:int", float, float, const vector<int64_t>& ,int)
            // NBLA_REGISTER_FUNCTION_IMPL(Randn, Randn<ulong>, "cpu:ulong", float, float, const vector<int64_t>& ,int)
            // NBLA_REGISTER_FUNCTION_IMPL(Randn, Randn<long>, "cpu:long", float, float, const vector<int64_t>& ,int)
            // NBLA_REGISTER_FUNCTION_IMPL(Randn, Randn<ulonglong>, "cpu:ulonglong", float, float, const vector<int64_t>& ,int)
            // NBLA_REGISTER_FUNCTION_IMPL(Randn, Randn<longlong>, "cpu:longlong", float, float, const vector<int64_t>& ,int)
            NBLA_REGISTER_FUNCTION_IMPL(Randn, Randn<float>, "cpu:float", float, float, const vector<int64_t>& ,int)
            NBLA_REGISTER_FUNCTION_IMPL(Randn, Randn<double>, "cpu:double", float, float, const vector<int64_t>& ,int)
            // NBLA_REGISTER_FUNCTION_IMPL(Randn, Randn<longdouble>, "cpu:longdouble", float, float, const vector<int64_t>& ,int)

            /*reshape*/
            // NBLA_REGISTER_FUNCTION_IMPL(Reshape, Reshape<bool>, "cpu:bool", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Reshape, Reshape<uchar>, "cpu:ubyte", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Reshape, Reshape<char>, "cpu:byte", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Reshape, Reshape<ushort>, "cpu:ushort", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Reshape, Reshape<short>, "cpu:short", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Reshape, Reshape<uint>, "cpu:uint", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Reshape, Reshape<int>, "cpu:int", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Reshape, Reshape<ulong>, "cpu:ulong", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Reshape, Reshape<long>, "cpu:long", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Reshape, Reshape<ulonglong>, "cpu:ulonglong", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Reshape, Reshape<longlong>, "cpu:longlong", const vector<int64_t> &, bool)
            NBLA_REGISTER_FUNCTION_IMPL(Reshape, Reshape<float>, "cpu:float", const vector<int64_t> &, bool)
            NBLA_REGISTER_FUNCTION_IMPL(Reshape, Reshape<double>, "cpu:double", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Reshape, Reshape<longdouble>, "cpu:longdouble", const vector<int64_t> &, bool)

           /*round*/
            // NBLA_REGISTER_FUNCTION_IMPL(Round, Round<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(Round, Round<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(Round, Round<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(Round, Round<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(Round, Round<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(Round, Round<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(Round, Round<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(Round, Round<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(Round, Round<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(Round, Round<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(Round, Round<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(Round, Round<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(Round, Round<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(Round, Round<longdouble>, "cpu:longdouble")

            /*sigmoid*/
            // NBLA_REGISTER_FUNCTION_IMPL(Sigmoid, Sigmoid<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(Sigmoid, Sigmoid<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(Sigmoid, Sigmoid<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(Sigmoid, Sigmoid<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(Sigmoid, Sigmoid<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(Sigmoid, Sigmoid<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(Sigmoid, Sigmoid<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(Sigmoid, Sigmoid<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(Sigmoid, Sigmoid<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(Sigmoid, Sigmoid<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(Sigmoid, Sigmoid<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(Sigmoid, Sigmoid<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(Sigmoid, Sigmoid<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(Sigmoid, Sigmoid<longdouble>, "cpu:longdouble")

            /*sign*/
            // NBLA_REGISTER_FUNCTION_IMPL(Sign, Sign<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(Sign, Sign<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(Sign, Sign<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(Sign, Sign<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(Sign, Sign<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(Sign, Sign<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(Sign, Sign<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(Sign, Sign<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(Sign, Sign<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(Sign, Sign<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(Sign, Sign<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(Sign, Sign<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(Sign, Sign<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(Sign, Sign<longdouble>, "cpu:longdouble")

            /*sin*/
            // NBLA_REGISTER_FUNCTION_IMPL(Sin, Sin<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(Sin, Sin<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(Sin, Sin<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(Sin, Sin<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(Sin, Sin<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(Sin, Sin<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(Sin, Sin<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(Sin, Sin<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(Sin, Sin<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(Sin, Sin<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(Sin, Sin<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(Sin, Sin<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(Sin, Sin<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(Sin, Sin<longdouble>, "cpu:longdouble")

            /*sinc*/
            // NBLA_REGISTER_FUNCTION_IMPL(Sinc, Sinc<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(Sinc, Sinc<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(Sinc, Sinc<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(Sinc, Sinc<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(Sinc, Sinc<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(Sinc, Sinc<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(Sinc, Sinc<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(Sinc, Sinc<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(Sinc, Sinc<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(Sinc, Sinc<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(Sinc, Sinc<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(Sinc, Sinc<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(Sinc, Sinc<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(Sinc, Sinc<longdouble>, "cpu:longdouble")

            /*sinh*/
            // NBLA_REGISTER_FUNCTION_IMPL(Sinh, Sinh<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(Sinh, Sinh<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(Sinh, Sinh<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(Sinh, Sinh<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(Sinh, Sinh<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(Sinh, Sinh<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(Sinh, Sinh<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(Sinh, Sinh<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(Sinh, Sinh<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(Sinh, Sinh<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(Sinh, Sinh<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(Sinh, Sinh<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(Sinh, Sinh<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(Sinh, Sinh<longdouble>, "cpu:longdouble")

            /*slice*/
            // NBLA_REGISTER_FUNCTION_IMPL(Slice, Slice<bool>, "cpu:bool", const vector<int64_t> &, const vector<int64_t> &, const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Slice, Slice<uchar>, "cpu:ubyte", const vector<int64_t> &, const vector<int64_t> &, const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Slice, Slice<char>, "cpu:byte", const vector<int64_t> &, const vector<int64_t> &, const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Slice, Slice<ushort>, "cpu:ushort", const vector<int64_t> &, const vector<int64_t> &, const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Slice, Slice<short>, "cpu:short", const vector<int64_t> &, const vector<int64_t> &, const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Slice, Slice<uint>, "cpu:uint", const vector<int64_t> &, const vector<int64_t> &, const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Slice, Slice<int>, "cpu:int", const vector<int64_t> &, const vector<int64_t> &, const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Slice, Slice<ulong>, "cpu:ulong", const vector<int64_t> &, const vector<int64_t> &, const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Slice, Slice<long>, "cpu:long", const vector<int64_t> &, const vector<int64_t> &, const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Slice, Slice<ulonglong>, "cpu:ulonglong", const vector<int64_t> &, const vector<int64_t> &, const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Slice, Slice<longlong>, "cpu:longlong", const vector<int64_t> &, const vector<int64_t> &, const vector<int64_t> &)
            NBLA_REGISTER_FUNCTION_IMPL(Slice, Slice<float>, "cpu:float", const vector<int64_t> &, const vector<int64_t> &, const vector<int64_t> &)
            NBLA_REGISTER_FUNCTION_IMPL(Slice, Slice<double>, "cpu:double", const vector<int64_t> &, const vector<int64_t> &, const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Slice, Slice<longdouble>, "cpu:longdouble", const vector<int64_t> &, const vector<int64_t> &, const vector<int64_t> &)

            /*sort*/
            // NBLA_REGISTER_FUNCTION_IMPL(Sort, Sort<bool>, "cpu:bool", int, bool, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Sort, Sort<uchar>, "cpu:ubyte", int, bool, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Sort, Sort<char>, "cpu:byte", int, bool, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Sort, Sort<ushort>, "cpu:ushort", int, bool, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Sort, Sort<short>, "cpu:short", int, bool, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Sort, Sort<uint>, "cpu:uint", int, bool, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Sort, Sort<int>, "cpu:int", int, bool, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Sort, Sort<ulong>, "cpu:ulong", int, bool, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Sort, Sort<long>, "cpu:long", int, bool, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Sort, Sort<ulonglong>, "cpu:ulonglong", int, bool, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Sort, Sort<longlong>, "cpu:longlong", int, bool, bool, bool)
            NBLA_REGISTER_FUNCTION_IMPL(Sort, Sort<float>, "cpu:float", int, bool, bool, bool)
            NBLA_REGISTER_FUNCTION_IMPL(Sort, Sort<double>, "cpu:double", int, bool, bool, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Sort, Sort<longdouble>, "cpu:longdouble", int, bool, bool, bool)

            /*split*/
            // NBLA_REGISTER_FUNCTION_IMPL(Split, Split<bool>, "cpu:bool", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Split, Split<uchar>, "cpu:ubyte", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Split, Split<char>, "cpu:byte", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Split, Split<ushort>, "cpu:ushort", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Split, Split<short>, "cpu:short", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Split, Split<uint>, "cpu:uint", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Split, Split<int>, "cpu:int", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Split, Split<ulong>, "cpu:ulong", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Split, Split<long>, "cpu:long", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Split, Split<ulonglong>, "cpu:ulonglong", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Split, Split<longlong>, "cpu:longlong", int)
            NBLA_REGISTER_FUNCTION_IMPL(Split, Split<float>, "cpu:float", int)
            NBLA_REGISTER_FUNCTION_IMPL(Split, Split<double>, "cpu:double", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Split, Split<longdouble>, "cpu:longdouble", int)

            /*sqrt*/
            // NBLA_REGISTER_FUNCTION_IMPL(Sqrt, Sqrt<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(Sqrt, Sqrt<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(Sqrt, Sqrt<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(Sqrt, Sqrt<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(Sqrt, Sqrt<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(Sqrt, Sqrt<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(Sqrt, Sqrt<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(Sqrt, Sqrt<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(Sqrt, Sqrt<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(Sqrt, Sqrt<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(Sqrt, Sqrt<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(Sqrt, Sqrt<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(Sqrt, Sqrt<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(Sqrt, Sqrt<longdouble>, "cpu:longdouble")

            /*stack*/
            // NBLA_REGISTER_FUNCTION_IMPL(Stack, Stack<bool>, "cpu:bool", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Stack, Stack<uchar>, "cpu:ubyte", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Stack, Stack<char>, "cpu:byte", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Stack, Stack<ushort>, "cpu:ushort", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Stack, Stack<short>, "cpu:short", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Stack, Stack<uint>, "cpu:uint", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Stack, Stack<int>, "cpu:int", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Stack, Stack<ulong>, "cpu:ulong", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Stack, Stack<long>, "cpu:long", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Stack, Stack<ulonglong>, "cpu:ulonglong", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Stack, Stack<longlong>, "cpu:longlong", int)
            NBLA_REGISTER_FUNCTION_IMPL(Stack, Stack<float>, "cpu:float", int)
            NBLA_REGISTER_FUNCTION_IMPL(Stack, Stack<double>, "cpu:double", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Stack, Stack<longdouble>, "cpu:longdouble", int)

            /*sub2*/
            // NBLA_REGISTER_FUNCTION_IMPL(Sub2, Sub2<bool>, "cpu:bool", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Sub2, Sub2<uchar>, "cpu:ubyte", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Sub2, Sub2<char>, "cpu:byte", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Sub2, Sub2<ushort>, "cpu:ushort", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Sub2, Sub2<short>, "cpu:short", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Sub2, Sub2<uint>, "cpu:uint", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Sub2, Sub2<int>, "cpu:int", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Sub2, Sub2<ulong>, "cpu:ulong", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Sub2, Sub2<long>, "cpu:long", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Sub2, Sub2<ulonglong>, "cpu:ulonglong", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Sub2, Sub2<longlong>, "cpu:longlong", bool)
            NBLA_REGISTER_FUNCTION_IMPL(Sub2, Sub2<float>, "cpu:float", bool)
            NBLA_REGISTER_FUNCTION_IMPL(Sub2, Sub2<double>, "cpu:double", bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Sub2, Sub2<longdouble>, "cpu:longdouble", bool)

            /*sum*/
            // NBLA_REGISTER_FUNCTION_IMPL(Sum, Sum<bool>, "cpu:bool", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Sum, Sum<uchar>, "cpu:ubyte", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Sum, Sum<char>, "cpu:byte", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Sum, Sum<ushort>, "cpu:ushort", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Sum, Sum<short>, "cpu:short", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Sum, Sum<uint>, "cpu:uint", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Sum, Sum<int>, "cpu:int", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Sum, Sum<ulong>, "cpu:ulong", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Sum, Sum<long>, "cpu:long", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Sum, Sum<ulonglong>, "cpu:ulonglong", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Sum, Sum<longlong>, "cpu:longlong", const vector<int64_t> &, bool)
            NBLA_REGISTER_FUNCTION_IMPL(Sum, Sum<float>, "cpu:float", const vector<int64_t> &, bool)
            NBLA_REGISTER_FUNCTION_IMPL(Sum, Sum<double>, "cpu:double", const vector<int64_t> &, bool)
            // NBLA_REGISTER_FUNCTION_IMPL(Sum, Sum<longdouble>, "cpu:longdouble", const vector<int64_t> &, bool)

            /*tan*/
            // NBLA_REGISTER_FUNCTION_IMPL(Tan, Tan<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(Tan, Tan<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(Tan, Tan<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(Tan, Tan<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(Tan, Tan<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(Tan, Tan<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(Tan, Tan<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(Tan, Tan<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(Tan, Tan<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(Tan, Tan<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(Tan, Tan<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(Tan, Tan<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(Tan, Tan<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(Tan, Tan<longdouble>, "cpu:longdouble")

            /*tanh*/
            // NBLA_REGISTER_FUNCTION_IMPL(Tanh, Tanh<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(Tanh, Tanh<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(Tanh, Tanh<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(Tanh, Tanh<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(Tanh, Tanh<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(Tanh, Tanh<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(Tanh, Tanh<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(Tanh, Tanh<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(Tanh, Tanh<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(Tanh, Tanh<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(Tanh, Tanh<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(Tanh, Tanh<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(Tanh, Tanh<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(Tanh, Tanh<longdouble>, "cpu:longdouble")

            /*transpose*/
            // NBLA_REGISTER_FUNCTION_IMPL(Transpose, Transpose<bool>, "cpu:bool", const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Transpose, Transpose<uchar>, "cpu:ubyte", const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Transpose, Transpose<char>, "cpu:byte", const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Transpose, Transpose<ushort>, "cpu:ushort", const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Transpose, Transpose<short>, "cpu:short", const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Transpose, Transpose<uint>, "cpu:uint", const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Transpose, Transpose<int>, "cpu:int", const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Transpose, Transpose<ulong>, "cpu:ulong", const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Transpose, Transpose<long>, "cpu:long", const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Transpose, Transpose<ulonglong>, "cpu:ulonglong", const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Transpose, Transpose<longlong>, "cpu:longlong", const vector<int64_t> &)
            NBLA_REGISTER_FUNCTION_IMPL(Transpose, Transpose<float>, "cpu:float", const vector<int64_t> &)
            NBLA_REGISTER_FUNCTION_IMPL(Transpose, Transpose<double>, "cpu:double", const vector<int64_t> &)
            // NBLA_REGISTER_FUNCTION_IMPL(Transpose, Transpose<longdouble>, "cpu:longdouble", const vector<int64_t> &)

            /*where*/
            // NBLA_REGISTER_FUNCTION_IMPL(Where, Where<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(Where, Where<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(Where, Where<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(Where, Where<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(Where, Where<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(Where, Where<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(Where, Where<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(Where, Where<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(Where, Where<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(Where, Where<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(Where, Where<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(Where, Where<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(Where, Where<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(Where, Where<longdouble>, "cpu:longdouble")

            /*softmax*/
            // NBLA_REGISTER_FUNCTION_IMPL(Softmax, Softmax<bool>, "cpu:bool", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Softmax, Softmax<uchar>, "cpu:ubyte", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Softmax, Softmax<char>, "cpu:byte", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Softmax, Softmax<ushort>, "cpu:ushort", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Softmax, Softmax<short>, "cpu:short", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Softmax, Softmax<uint>, "cpu:uint", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Softmax, Softmax<int>, "cpu:int", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Softmax, Softmax<ulong>, "cpu:ulong", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Softmax, Softmax<long>, "cpu:long", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Softmax, Softmax<ulonglong>, "cpu:ulonglong", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Softmax, Softmax<longlong>, "cpu:longlong", int)
            NBLA_REGISTER_FUNCTION_IMPL(Softmax, Softmax<float>, "cpu:float", int)
            NBLA_REGISTER_FUNCTION_IMPL(Softmax, Softmax<double>, "cpu:double", int)
            // NBLA_REGISTER_FUNCTION_IMPL(Softmax, Softmax<longdouble>, "cpu:longdouble", int)

            /*logsigmoid*/
            // NBLA_REGISTER_FUNCTION_IMPL(LogSigmoid, LogSigmoid<bool>, "cpu:bool")
            // NBLA_REGISTER_FUNCTION_IMPL(LogSigmoid, LogSigmoid<uchar>, "cpu:ubyte")
            // NBLA_REGISTER_FUNCTION_IMPL(LogSigmoid, LogSigmoid<char>, "cpu:byte")
            // NBLA_REGISTER_FUNCTION_IMPL(LogSigmoid, LogSigmoid<ushort>, "cpu:ushort")
            // NBLA_REGISTER_FUNCTION_IMPL(LogSigmoid, LogSigmoid<short>, "cpu:short")
            // NBLA_REGISTER_FUNCTION_IMPL(LogSigmoid, LogSigmoid<uint>, "cpu:uint")
            // NBLA_REGISTER_FUNCTION_IMPL(LogSigmoid, LogSigmoid<int>, "cpu:int")
            // NBLA_REGISTER_FUNCTION_IMPL(LogSigmoid, LogSigmoid<ulong>, "cpu:ulong")
            // NBLA_REGISTER_FUNCTION_IMPL(LogSigmoid, LogSigmoid<long>, "cpu:long")
            // NBLA_REGISTER_FUNCTION_IMPL(LogSigmoid, LogSigmoid<ulonglong>, "cpu:ulonglong")
            // NBLA_REGISTER_FUNCTION_IMPL(LogSigmoid, LogSigmoid<longlong>, "cpu:longlong")
            NBLA_REGISTER_FUNCTION_IMPL(LogSigmoid, LogSigmoid<float>, "cpu:float")
            NBLA_REGISTER_FUNCTION_IMPL(LogSigmoid, LogSigmoid<double>, "cpu:double")
            // NBLA_REGISTER_FUNCTION_IMPL(LogSigmoid, LogSigmoid<longdouble>, "cpu:longdouble")

            /* Solver系クラスの登録 */
            // % for name, _, arg_types in solver_list:
            // % for type_config, ttypes in solver_types.get(name, {}).items():
            //     <%
            //     ttype_args = ', '.join(ttypes)
            //     ttype_symbol = ''.join(map(lambda x: x.replace(' ', ''), ttypes))
            //     solver_sym = '{}<{}>'.format(name, ttype_args)
            //     solver_typed_sym = '{}_{}'.format(name, ttype_symbol)
            //     %> 
            // using ${solver_typed_sym} = ${solver_sym};
            // NBLA_REGISTER_SOLVER_IMPL(${name}, ${solver_typed_sym}, "cpu:${type_config}"${''.join(map(lambda x: ', ' + x, arg_types))});
            // %endfor  
            // % endfor
        }


        void clear_cpu_memory_cache()
        {
            SingletonManager::get<Cpu>()->caching_allocator()->free_unused_caches();
        }


        void print_cpu_memory_cache_map()
        {
            SingletonManager::get<Cpu>()->caching_allocator()->print_memory_cache_map();
        }


        vector<string> cpu_array_classes() 
        {
            return SingletonManager::get<Cpu>()->array_classes();
        }


        void _cpu_set_array_classes(const vector<string> &a) 
        {
            SingletonManager::get<Cpu>()->_set_array_classes(a);
        }


        void cpu_device_synchronize(const string& device)
        {
            // nothing
        }


        int cpu_get_device_count()
        {
            return 1;
        }


        vector<string> cpu_get_devices()
        {
            return {"0"};
        }

    }
}
